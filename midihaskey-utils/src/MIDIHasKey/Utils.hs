{-# LANGUAGE UnicodeSyntax #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE ScopedTypeVariables #-}
{-# LANGUAGE QuasiQuotes #-}

-- Type-level
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE PolyKinds #-}
{-# LANGUAGE UndecidableInstances #-}

{-# LANGUAGE ForeignFunctionInterface #-}

module MIDIHasKey.Utils
     ( (‚Ä¢), (<&!>), (‚ãÑ), type (‚Üî), type Len, type ùîπ
     , module Data.Function
     , module Data.Functor
     , CatchThreadFailFlag (..)
     , catchThreadFail
     , dupe
     , maybeMUnit
     , maybeMUnit'
     , exit
     , nat2MidiKey
     ) where

import Prelude.Unicode
import GHC.TypeLits
import Data.Proxy
import Data.Function ((&))
import Data.Functor ((<&>))
import Text.InterpolatedString.QM

import Control.Monad ((<$!>), void)
import Control.Exception (SomeException, BlockedIndefinitelyOnMVar, handle)

import Sound.MIDI.Message.Channel
import System.IO (hPutStrLn, hPrint, stderr)

foreign import ccall "exit" exit ‚à∑ IO ()


data (Œ± ‚à∑ Œ∫) ‚Üî Œ≤
infixr 5 ‚Üî

-- How many elements combined with (‚Üî)
type family Len (Œ± ‚à∑ Œ∫) ‚à∑ Nat where
  Len (x ‚Üî xs) = Len x + Len xs
  Len _ = 1

type ùîπ = Bool


-- Key-type to MIDI key
nat2MidiKey ‚à∑ KnownNat Œ± ‚áí Proxy Œ± ‚Üí Pitch
nat2MidiKey = toPitch ‚àò fromInteger ‚àò natVal


-- Left-to-right composition, just like (>=>) for monads.
(‚Ä¢) ‚à∑ (Œ± ‚Üí Œ≤) ‚Üí (Œ≤ ‚Üí Œ≥) ‚Üí (Œ± ‚Üí Œ≥)
(‚Ä¢) = flip (‚àò)
{-# INLINE (‚Ä¢) #-}
infixl 9 ‚Ä¢

-- Left-to-right infix strict fmap
(<&!>) ‚à∑ Monad Œº ‚áí Œº Œ± ‚Üí (Œ± ‚Üí Œ≤) ‚Üí Œº Œ≤
(<&!>) = flip (<$!>)
{-# INLINE (<&!>) #-}
infixr 5 <&!>

-- Generic concatenation
(‚ãÑ) ‚à∑ Monoid Œ± ‚áí Œ± ‚Üí Œ± ‚Üí Œ±
(‚ãÑ) = (<>)
{-# INLINE (‚ãÑ) #-}
infixr 6 ‚ãÑ


data CatchThreadFailFlag
   = MVarInfLockIsOkay
     deriving (Eq, Show)

-- Helps to prevent undefined behavior when application still working after some of its subsystem is
-- failed. Usually it goes okay, but if something unexpectedly goes wrong, we shouldn't continue
-- working and making user to be confused.
catchThreadFail ‚à∑ [CatchThreadFailFlag] ‚Üí String ‚Üí IO () ‚Üí IO ()
catchThreadFail flags threadName
  = (if MVarInfLockIsOkay `elem` flags then handle mVarInfLockHandler else id)
  ‚Ä¢ handle etcHandler
  where
    mVarInfLockHandler (e ‚à∑ BlockedIndefinitelyOnMVar) =
      hPutStrLn stderr [qms| "{threadName}" is stopped by "{e}" exception,
                             we're taking it as okay, because it is probably a listener
                             which doesn't have enough calls yet but designed properly
                             for further implementations. |]

    etcHandler (e ‚à∑ SomeException) = do
      hPutStrLn stderr [qm| "{threadName}" thread has failed! |]
      hPrint stderr e
      exit


dupe ‚à∑ Œ± ‚Üí (Œ±, Œ±)
dupe x = (x, x)
{-# INLINE dupe #-}

maybeMUnit ‚à∑ Monad Œº ‚áí (Œ± ‚Üí Œº Œ≤) ‚Üí Maybe Œ± ‚Üí Œº ()
maybeMUnit f = maybe (pure ()) (void ‚àò f)
{-# INLINE maybeMUnit #-}

-- With flipped arguments
maybeMUnit' ‚à∑ Monad Œº ‚áí Maybe Œ± ‚Üí (Œ± ‚Üí Œº Œ≤) ‚Üí Œº ()
maybeMUnit' x f = maybe (pure ()) (void ‚àò f) x
{-# INLINE maybeMUnit' #-}
